{"version":3,"sources":["store/index.js","components/LoadingPage/LoadingPage.js","components/User/Users.js","components/Comment/Comment.js","components/CommentList/CommentList.js","components/Post/Post.js","components/PostList/PostList.js","api/data.js","App.js","index.js"],"names":["ACTION_TYPES","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","GET_DATA","loading","type","loaded","getPostsWithUsers","posts","users","comments","initialState","isLoading","isLoaded","store","createStore","state","arguments","length","undefined","action","_objectSpread","map","post","user","find","item","id","userId","filter","comment","postId","LoadingPage","getState","react_default","a","createElement","Fragment","className","role","Users","_ref","name","email","website","Comments","body","CommentList","Comment_Comments","key","Post","data","title","Users_Users","CommentList_CommentList_CommentList","PostList","Post_Post_Post","getData","url","fetch","concat","then","response","json","App","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","Promise","all","_ref2","slicedToArray","inherits","createClass","value","_this2","unsubscribe","subscribe","setState","_store$getState","onClick","LoadingPage_LoadingPage_LoadingPage","PostList_PostList_PostList","React","Component","ReactDOM","render","es","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.0effdd41.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\n// action types\nconst ACTION_TYPES = {\n  LOAD_POSTS_REQUEST: 'LOAD_POSTS_REQUEST',\n  LOAD_POSTS_SUCCESS: 'LOAD_POSTS_SUCCESS',\n  GET_DATA: 'GET_DATA',\n};\n\n// action creators\nexport const loading = () => ({\n  type: ACTION_TYPES.LOAD_POSTS_REQUEST,\n});\n\nexport const loaded = () => ({\n  type: ACTION_TYPES.LOAD_POSTS_SUCCESS,\n});\n\nexport const getPostsWithUsers = (posts, users, comments) => ({\n  type: ACTION_TYPES.GET_DATA,\n  posts,\n  comments,\n  users,\n});\n\nconst initialState = {\n  posts: [],\n  isLoading: false,\n  isLoaded: false,\n};\n\nfunction reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case ACTION_TYPES.LOAD_POSTS_REQUEST: {\n      return {\n        ...state,\n        isLoading: !state.isLoading,\n      };\n    }\n    case ACTION_TYPES.LOAD_POSTS_SUCCESS: {\n      return {\n        ...state,\n        isLoaded: !state.isLoaded,\n      };\n    }\n    case ACTION_TYPES.GET_DATA: {\n      return {\n        ...state,\n        posts: action.posts.map(post => ({\n          ...post,\n          user: action.users.find(item => item.id === post.userId),\n          comments: action.comments.filter(comment => comment.postId === post.id),\n        })),\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport './LoadingPage.css';\n\nimport { store } from '../../store';\n\nexport const LoadingPage = () => {\n  const { isLoading } = store.getState();\n  return (\n    <>\n      {isLoading && (\n        <div className=\"spinner-grow text-dark\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport './Users.css';\nimport PropTypes from 'prop-types';\n\nexport const Users = ({ name, email, website }) => (\n  <>\n    <h6>{name}</h6>\n    <h6>{email}</h6>\n    <h6>{website}</h6>\n  </>\n);\n\nUsers.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport './Comment.css';\nimport PropTypes from 'prop-types';\n\nexport const Comments = ({ comment }) => (\n  <div className=\"card-body\">\n    <li className=\"card-title\">{comment.name}</li>\n    <p className=\"card-text card-email\">{comment.email}</p>\n    <p className=\"card-text\">{comment.body}</p>\n  </div>\n);\n\nComments.propTypes = {\n  comment: PropTypes.shape({\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport './CommentList.css';\n\nimport PropTypes from 'prop-types';\nimport { Comments } from '../Comment/Comment';\n\nexport const CommentList = ({ comments }) => (\n  <div className=\"card w-75\">\n    <h4>Comments:</h4>\n    {comments.map(comment => (\n      <Comments comment={comment} key={comment.id} />))}\n  </div>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport './Post.css';\n\nimport PropTypes from 'prop-types';\nimport { Users } from '../User/Users';\nimport { CommentList } from '../CommentList/CommentList';\n\nexport const Post = ({ data }) => (\n  <div className=\"card\">\n    <div className=\"card-header\">\n      <h4 className=\"card-title\">{data.title}</h4>\n      <Users {...data.user} />\n    </div>\n    <div className=\"card-body\">\n      <p className=\"card-text\">\n        {data.body}\n      </p>\n      <CommentList comments={data.comments} />\n    </div>\n  </div>\n);\n\nPost.propTypes = {\n  data: PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.string,\n    comments: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport './PostList.css';\n\nimport { store } from '../../store';\nimport { Post } from '../Post/Post';\n\nexport const PostList = () => (\n  <div className=\"post-list\">\n    {store.getState().posts.map(post => (\n      <Post data={post} key={post.id} />))\n    }\n  </div>\n);\n","const URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = url => fetch(`${URL}${url}`).then(response => response.json());\n","import React from 'react';\nimport './App.css';\n\nimport { LoadingPage } from './components/LoadingPage/LoadingPage';\nimport { PostList } from './components/PostList/PostList';\nimport {\n  getPostsWithUsers, loaded, loading, store,\n} from './store';\nimport { getData } from './api/data';\n\nexport class App extends React.Component {\n  state = {\n    posts: store.getState().posts,\n  };\n\n  componentDidMount() {\n    this.unsubscribe = store.subscribe(() => this.setState({\n      posts: store.getState().posts,\n    }));\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  getData = () => {\n    store.dispatch(loading());\n    Promise.all([getData('posts'), getData('users'), getData('comments')]).then(\n      ([posts, users, comments]) => {\n        store.dispatch(loading());\n        store.dispatch(getPostsWithUsers(posts, users, comments));\n        store.dispatch(loaded());\n      }\n    );\n  };\n\n  render() {\n    const { posts, isLoading, isLoaded } = store.getState();\n    return (\n      <div className=\"main\">\n        <h1>Dynamic list of posts</h1>\n        <p>\n          <span>posts: </span>\n          {posts.length}\n        </p>\n        {!isLoaded && !isLoading && (\n          <button onClick={this.getData} className=\"btn btn-outline-dark\">\n            Load posts\n          </button>\n        )}\n        <LoadingPage />\n        {isLoaded && <PostList />}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { App } from './App';\n\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}